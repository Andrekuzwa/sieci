import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

class Perceptron(object):

    #parametry
    #eta:    zmiennoprzecinkowy  zmwspolczynnik uczenia pomiedzy 0.0 a 1.0
    #n_iter: liczba całkowita / liczba przebiegow po zestawach uczacych

    #Atrybuty
    #w_: jednowymiarowa tablica / wagi po dopasowaniu
    #errors_: #lista

    #liczba nieprawidlowych  klasyfikacji w kazdej epoce
    def __init__(self, eta=0.01, n_iter=10, random_seed=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_seed = random_seed

    def fit(self,X,y):   #dopasowanie danych uczacych
       #X: {tablicopodobny], wymiary = [n_probek,n_cech] wektry uczace
       #y: tablicopodobny ,wymiary = [n_probek]
        # zwraca self: - obiekt
        rgen = np.random.RandomState(self.random_seed)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])
        self.errors_=[]

        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(X,y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self,X):
        return np.dot(X,self.w_[1:]) + self.w_[0] #oblicza całkowite pobudzenie

    def predict(self,X):
        return np.where(self.net_input(X) >= 0.0, 1, -1)
        #zwraca etykiete klas po obliczeniu funkcji skoku jednostkowego


df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)

y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)
X = df.iloc[0:100,[0,2]].values
plt.scatter(X[:50,0],X[:50,1],color='red',marker='o',label='Setosa')
plt.scatter(X[50:100,0],X[50:100,1],color='blue',marker='x',label='Versicolor')
plt.xlabel('Dlguosc dzialki[cm]')
plt.ylabel('Dlugosc płatka[cm]')
plt.legend(loc='upper left')
plt.show()

ppn = Perceptron(eta=0.1, n_iter=10)
ppn.fit(X, y)
print(X)
print(y)
print(ppn.w_)
plt.xlabel('Epoki')
plt.ylabel('Liczba aktualizacji')

plt.tight_layout()
#plt.savefig('./rysunki/02_07.png', dpi=300)
plt.show()


from matplotlib.colors import ListedColormap


def plot_decision_regions(X, y, classifier, resolution=0.02):

    # konfiguruje generator znaczników i mapę kolorów
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # rysuje wykres powierzchni decyzyjnej
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                         np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    # rysuje wykres próbek
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],
                    alpha=0.8, c=cmap(idx),
                    marker=markers[idx], label=cl)

plot_decision_regions(X, y, classifier=ppn)
plt.xlabel('Długość działki [cm]')
plt.ylabel('Długość płatka [cm]')
plt.legend(loc='upper left')
plt.show()